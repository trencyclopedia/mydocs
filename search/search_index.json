{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MyDocs This site hosts some of my blogs written both in Egnlish and Chinese. This document is written in markdown and curated by MkDocs, for full documentation visit mkdocs.org .","title":"Welcome to MyDocs"},{"location":"#welcome-to-mydocs","text":"This site hosts some of my blogs written both in Egnlish and Chinese. This document is written in markdown and curated by MkDocs, for full documentation visit mkdocs.org .","title":"Welcome to MyDocs"},{"location":"website/","text":"website","title":"website"},{"location":"website/#website","text":"","title":"website"},{"location":"English%20Blogs/How%20to/Add%20aliases%20to%20note/","text":"Sometimes, you might want to refer to the same file with multiple names in different contexts. These alternative names are what we call \"aliases\". For example, you might want to refer to your partner by their full name, first name, or a nickname. Or you might want to refer to \"artificial intelligence\" by its abbreviation \"AI\". If you know multiple languages, you may want to refer to the same concept with their name in the same language that the rest of the note is written in. Set aliases Starting in 0.9.16, you're able to specify the \"aliases\" property in a note's like so: --- aliases: [AI, Artificial Intelligence] --- Please note that this section must be placed at the very top of a note to take effect. In the future, we'll consider more user-friendly ways to manage aliases than manually writing them in front matter. Link with aliases Once you've set aliases for a file, you can write [[alias]] to link to the original page. A redirect icon will show up in the auto-complete list like so: An internal link with display text will get inserted like so: [[Add aliases to note|alias]] . Note: the link to alias is NOT inserted as [[alias]] for interoperability, so that other software can recognize it as well. Find unlinked mentions After you've set aliases for a note, you can find unlinked mentions by both its name and its aliases. For example, after setting \"AI\" as an alias for \"Artificial intelligence\", you'll see mentions of \"AI\" in other files in the section. If you decide to link this mention, a link with display text set to the alias will be created for you. Following the example above, AI will become once you click on the \"Link\" button.","title":"Add aliases to note"},{"location":"English%20Blogs/How%20to/Add%20aliases%20to%20note/#set-aliases","text":"Starting in 0.9.16, you're able to specify the \"aliases\" property in a note's like so: --- aliases: [AI, Artificial Intelligence] --- Please note that this section must be placed at the very top of a note to take effect. In the future, we'll consider more user-friendly ways to manage aliases than manually writing them in front matter.","title":"Set aliases"},{"location":"English%20Blogs/How%20to/Add%20aliases%20to%20note/#link-with-aliases","text":"Once you've set aliases for a file, you can write [[alias]] to link to the original page. A redirect icon will show up in the auto-complete list like so: An internal link with display text will get inserted like so: [[Add aliases to note|alias]] . Note: the link to alias is NOT inserted as [[alias]] for interoperability, so that other software can recognize it as well.","title":"Link with aliases"},{"location":"English%20Blogs/How%20to/Add%20aliases%20to%20note/#find-unlinked-mentions","text":"After you've set aliases for a note, you can find unlinked mentions by both its name and its aliases. For example, after setting \"AI\" as an alias for \"Artificial intelligence\", you'll see mentions of \"AI\" in other files in the section. If you decide to link this mention, a link with display text set to the alias will be created for you. Following the example above, AI will become once you click on the \"Link\" button.","title":"Find unlinked mentions"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/","text":"Setup documentation Workflow Markdown documentation, publish tools & workflows 14:10 Monday, December 13, 2021 I have been searching a lightweith, scablable and easy-to-use documentation method for around half a year since I finished my 150+ page-dissertation and wrote many other personal notes using Microsft Word. Previously, I searched and tried a few notetaking tools such as Roam, WorkFlowy, Evernote which didn't work out quite well for me. In fact, I sticked with Word and picked up OneNote, Notion, TheBrain to write notes, organize personal plans and projects. These tools works quite well for me at the beginning, but after I accumulated more data and records (e.g. seveal documents with 1000+ pages), Word and Notion begin to struggle with performance and scability issues. Additionally, word files and formats usually can't be coverted into html files in a straitforwad way, so another headache creeps in when I think about disseminating part of these written materials in my personal website on-line. I relize it is time to find an alternative. Initially, I tried to write light-weight documents using Markdown(md). But they were not very appealing to me immediately, because I missed some key features like table of cotents, navigation structures offered by what-you-see-is-what-you-get applications(e.g. Microsoft Word). Nonetheless, later on, when I browsed many extensive long structured documents/manuals originally written in md for open source projects, I reallized it would be a good solution to my problem too. These documents could either be hosted on-line in Github or viewed locally, and they can also be compiled as HTML files to read and share. So I fall back on md and start to learn these enabling tools for md documentation. At this moment, I am experimenting with some tools and trying to set up efficient workflows. For local documentation, I now decide to pick up Obsidian which I abodoned before. For on-line publication, I firstly try to use sphinx , it is not long before I find that MkDocs has similar functionalities but with more simpler md syntax and easier configuration. There is a more detailed article StructuredText vs. Markdown for technical documentation and reStructuredText \u548c Markdown \u8be5\u9009\u8c01\uff1f . In the following sections, I will share the most useful tips and workflows I have used so far. Markdown vs reStructuredTExt Markdown syntax is simple and widely used. By comparision, reStructuredTExt (rst) is more powerful and uniformed. Sadly, these two are not fully compatible. By now, as I am more familar and comforable with md, so I decide to use it to document my contents. But, considering of future demands, one day I may need to use more advanced features of rst, so I would most likely to write md documents in way that can be easily handled or reused by rst processers. The list below shows some comparision between makrdown and reStructuredText markdown guide reStructuredText reStructuredText syntax reference Markdown and reStructuredText tools for creating documentataion in reStructuredText Markdown Publish md documents on Github repository using MkDocs With MkDocs, all the md documents can be viewed locally on your browser. More attractively, they can be easily pushed to your Github repository and to be viewly publicly on a website as manuals or blogs too. Actually all the contents of this website are initially witten in md, and then converted to HTML by MkDocs. How handy and fantastic it is! To fully benefit from this feature, firstly create a repositrory on your github account and clone it into your local computer. Starting from the local folder magic can happen soon, and you just execute the following commands or follow the instructions from mkdocs.org : * `mkdocs new .` - Create a new project. * `mkdocs serve` - Start the live-reloading docs server, and view it at http://127.0.0.1:8000/ in your browser * `mkdocs build` - Build the documentation site. * `mkdocs gh-deploy` - upload your local documents to your remote repository on github and publish there. As one of the drawbacks of md documents compared with reStructureText, the way to generate a table of content (TOC) is not uniformly specified in the syntax, so it is often problematic when you switch between md processing applications. Currently, mkdocs provides two different themes (i.e. ReadTheDocs and mkdocs), so that you can to arrange your pages in two distinct ways. configure table of contents in readthedocs theme Readthedocs theme, as the name implies, is designed for holding documents, therefore it can handle the structures of long and extensive documentions very well. To get a nice outline of your documents, by default, it will rely on the local folder and file structure. If you want to show the fiels in a differnt way, just add your customized TOC structure in the mkdocs.yml file. configure table of contents in mkdocs theme If you choose to use the mkdocs template, it will generate the navigation setions shown on top of your website home page using your local file hierarchy by default. This feature is nice and clear only if you have very limited amount of subsections, but it would be less informative if you have many different pages or sections to show. Likewisely, there is also a way to customize your website/file structure by edit the yml configuration file . In summary, MkDocs is a very convenienvet tool to deploy a simple website. It incorporates two useful themes to host either a documenation website or functional website. Nonetheless, if there is no automatic way to generate TOC, and it would be difficult to set up the hierarchial structure when you have a lot of md files. Local documentation with Obsidian When work on md files localy, I use Obsidian to process and manage them. TOC has a direc reflect of your directory struture within one vault, which is a term/method used by Obsidian to curate an independent and standalone repository. This feature is pretty neat enough if you learn to use folder structure and naming appropriately. Two usefule tips: - [[]] # internal link - #tools # the tag To learn more instructions on how to use obsidian, check out at obsidian workflow . Publish md documents on Github repository using Jekyll Github Docs reStructuredTExt Publish reStructuredText on Github repository with Sphinx TODOs: - add more instructions on how to use sphinx . - local editing of rst files. - publish on github. read the docs after running the command below: $ sphinx-quickstart You can use Markdown using MyST and reStructuredText in the same Sphinx project. We support this natively on Read the Docs, and you can do it locally: pip install myst-parser Then in your conf.py : extensions = ['myst_parser'] host on github pages host on readthedocs Workflow to update and publish docs TODOs: add more instructions on how the workflow is like. Read the Docs tutorial Read the Docs","title":"Setup documentation Workflow"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#setup-documentation-workflow","text":"","title":"Setup documentation Workflow"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#markdown-documentation-publish-tools-workflows","text":"14:10 Monday, December 13, 2021 I have been searching a lightweith, scablable and easy-to-use documentation method for around half a year since I finished my 150+ page-dissertation and wrote many other personal notes using Microsft Word. Previously, I searched and tried a few notetaking tools such as Roam, WorkFlowy, Evernote which didn't work out quite well for me. In fact, I sticked with Word and picked up OneNote, Notion, TheBrain to write notes, organize personal plans and projects. These tools works quite well for me at the beginning, but after I accumulated more data and records (e.g. seveal documents with 1000+ pages), Word and Notion begin to struggle with performance and scability issues. Additionally, word files and formats usually can't be coverted into html files in a straitforwad way, so another headache creeps in when I think about disseminating part of these written materials in my personal website on-line. I relize it is time to find an alternative. Initially, I tried to write light-weight documents using Markdown(md). But they were not very appealing to me immediately, because I missed some key features like table of cotents, navigation structures offered by what-you-see-is-what-you-get applications(e.g. Microsoft Word). Nonetheless, later on, when I browsed many extensive long structured documents/manuals originally written in md for open source projects, I reallized it would be a good solution to my problem too. These documents could either be hosted on-line in Github or viewed locally, and they can also be compiled as HTML files to read and share. So I fall back on md and start to learn these enabling tools for md documentation. At this moment, I am experimenting with some tools and trying to set up efficient workflows. For local documentation, I now decide to pick up Obsidian which I abodoned before. For on-line publication, I firstly try to use sphinx , it is not long before I find that MkDocs has similar functionalities but with more simpler md syntax and easier configuration. There is a more detailed article StructuredText vs. Markdown for technical documentation and reStructuredText \u548c Markdown \u8be5\u9009\u8c01\uff1f . In the following sections, I will share the most useful tips and workflows I have used so far.","title":"Markdown documentation, publish tools &amp; workflows"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#markdown-vs-restructuredtext","text":"Markdown syntax is simple and widely used. By comparision, reStructuredTExt (rst) is more powerful and uniformed. Sadly, these two are not fully compatible. By now, as I am more familar and comforable with md, so I decide to use it to document my contents. But, considering of future demands, one day I may need to use more advanced features of rst, so I would most likely to write md documents in way that can be easily handled or reused by rst processers. The list below shows some comparision between makrdown and reStructuredText markdown guide reStructuredText reStructuredText syntax reference Markdown and reStructuredText tools for creating documentataion in reStructuredText","title":"Markdown vs reStructuredTExt"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#markdown","text":"","title":"Markdown"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#publish-md-documents-on-github-repository-using-mkdocs","text":"With MkDocs, all the md documents can be viewed locally on your browser. More attractively, they can be easily pushed to your Github repository and to be viewly publicly on a website as manuals or blogs too. Actually all the contents of this website are initially witten in md, and then converted to HTML by MkDocs. How handy and fantastic it is! To fully benefit from this feature, firstly create a repositrory on your github account and clone it into your local computer. Starting from the local folder magic can happen soon, and you just execute the following commands or follow the instructions from mkdocs.org : * `mkdocs new .` - Create a new project. * `mkdocs serve` - Start the live-reloading docs server, and view it at http://127.0.0.1:8000/ in your browser * `mkdocs build` - Build the documentation site. * `mkdocs gh-deploy` - upload your local documents to your remote repository on github and publish there. As one of the drawbacks of md documents compared with reStructureText, the way to generate a table of content (TOC) is not uniformly specified in the syntax, so it is often problematic when you switch between md processing applications. Currently, mkdocs provides two different themes (i.e. ReadTheDocs and mkdocs), so that you can to arrange your pages in two distinct ways.","title":"Publish md documents on Github repository using MkDocs"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#configure-table-of-contents-in-readthedocs-theme","text":"Readthedocs theme, as the name implies, is designed for holding documents, therefore it can handle the structures of long and extensive documentions very well. To get a nice outline of your documents, by default, it will rely on the local folder and file structure. If you want to show the fiels in a differnt way, just add your customized TOC structure in the mkdocs.yml file.","title":"configure table of contents in readthedocs theme"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#configure-table-of-contents-in-mkdocs-theme","text":"If you choose to use the mkdocs template, it will generate the navigation setions shown on top of your website home page using your local file hierarchy by default. This feature is nice and clear only if you have very limited amount of subsections, but it would be less informative if you have many different pages or sections to show. Likewisely, there is also a way to customize your website/file structure by edit the yml configuration file . In summary, MkDocs is a very convenienvet tool to deploy a simple website. It incorporates two useful themes to host either a documenation website or functional website. Nonetheless, if there is no automatic way to generate TOC, and it would be difficult to set up the hierarchial structure when you have a lot of md files.","title":"configure table of contents in mkdocs theme"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#local-documentation-with-obsidian","text":"When work on md files localy, I use Obsidian to process and manage them. TOC has a direc reflect of your directory struture within one vault, which is a term/method used by Obsidian to curate an independent and standalone repository. This feature is pretty neat enough if you learn to use folder structure and naming appropriately. Two usefule tips: - [[]] # internal link - #tools # the tag To learn more instructions on how to use obsidian, check out at obsidian workflow .","title":"Local documentation with Obsidian"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#publish-md-documents-on-github-repository-using-jekyll","text":"Github Docs","title":"Publish md documents on Github repository using Jekyll"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#restructuredtext","text":"","title":"reStructuredTExt"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#publish-restructuredtext-on-github-repository-with-sphinx","text":"TODOs: - add more instructions on how to use sphinx . - local editing of rst files. - publish on github. read the docs after running the command below: $ sphinx-quickstart You can use Markdown using MyST and reStructuredText in the same Sphinx project. We support this natively on Read the Docs, and you can do it locally: pip install myst-parser Then in your conf.py : extensions = ['myst_parser']","title":"Publish reStructuredText on Github repository with Sphinx"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#host-on-github-pages","text":"","title":"host on github pages"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#host-on-readthedocs","text":"","title":"host on readthedocs"},{"location":"English%20Blogs/How%20to/Setup%20documentation%20workflow/#workflow-to-update-and-publish-docs","text":"TODOs: add more instructions on how the workflow is like. Read the Docs tutorial Read the Docs","title":"Workflow to update and publish docs"},{"location":"English%20Blogs/How%20to/Setup%20github%20workflow/","text":"","title":"Setup github workflow"},{"location":"English%20Blogs/How%20to/Setup%20github%20workflow/#_1","text":"","title":""},{"location":"English%20Blogs/Tech/Digital%20healthcare/","text":"Most hotkeys are customizable in Obsidian. We only defined default hotkeys for the most commonly used commands, but if you frequently use a command, it would save you lots of time if you add a hotkey for it. For a list of default hotkeys, . Viewing hotkeys The fastest way to see the hotkey set for a command is to find the command in . If there's a hotkey listed for that command, it's set. Setting hotkeys To add a hotkey, remove a hotkey, or restore hotkeys to default, go to Settings - Hotkeys. Note that you can also filter the list, as the list of commands is quite long.","title":"Digital healthcare"},{"location":"English%20Blogs/Tech/Digital%20healthcare/#viewing-hotkeys","text":"The fastest way to see the hotkey set for a command is to find the command in . If there's a hotkey listed for that command, it's set.","title":"Viewing hotkeys"},{"location":"English%20Blogs/Tech/Digital%20healthcare/#setting-hotkeys","text":"To add a hotkey, remove a hotkey, or restore hotkeys to default, go to Settings - Hotkeys. Note that you can also filter the list, as the list of commands is quite long.","title":"Setting hotkeys"},{"location":"English%20Blogs/Tech/Quantified-self/","text":"","title":"Quantified self"},{"location":"%E4%B8%AD%E6%96%87%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E6%91%98%E8%A6%81/","text":"\u8bfb\u4e66\u7b14\u8bb0 2021-12-14 10:29:55 \u4ee3\u529e\uff1a\u6dfb\u52a0\u7f51\u7ad9\u53d1\u5e03\u6d41\u7a0b\u548c\u5de5\u5177","title":"\u8bfb\u4e66\u7b14\u8bb0"},{"location":"%E4%B8%AD%E6%96%87%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E6%91%98%E8%A6%81/#_1","text":"2021-12-14 10:29:55 \u4ee3\u529e\uff1a\u6dfb\u52a0\u7f51\u7ad9\u53d1\u5e03\u6d41\u7a0b\u548c\u5de5\u5177","title":"\u8bfb\u4e66\u7b14\u8bb0"},{"location":"%E4%B8%AD%E6%96%87%E7%AC%94%E8%AE%B0/%E5%86%99%E4%BD%9C/%E5%86%99%E4%BD%9C/","text":"\u4e2d\u6587\u7b14\u8bb0 2021-12-14 10:29:55 \u4ee3\u529e\uff1a\u6dfb\u52a0\u7f51\u7ad9\u53d1\u5e03\u6d41\u7a0b\u548c\u5de5\u5177","title":"\u4e2d\u6587\u7b14\u8bb0"},{"location":"%E4%B8%AD%E6%96%87%E7%AC%94%E8%AE%B0/%E5%86%99%E4%BD%9C/%E5%86%99%E4%BD%9C/#_1","text":"2021-12-14 10:29:55 \u4ee3\u529e\uff1a\u6dfb\u52a0\u7f51\u7ad9\u53d1\u5e03\u6d41\u7a0b\u548c\u5de5\u5177","title":"\u4e2d\u6587\u7b14\u8bb0"}]}